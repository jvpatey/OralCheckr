import { useState, useEffect, useMemo } from "react";
import styled, { keyframes } from "styled-components";
import { PageBackground } from "../../../components/PageBackground";
import { ToggleButton } from "../../../components/habit-tracker/analytics/ToggleButton";
import { MonthView } from "./month-view/MonthView";
import { YearView } from "./year-view/YearView";
import { Habit } from "../../../services/habitService";
import { LocalStorage } from "../../../common/constants/local-storage";
import { faCalendarAlt, faCalendar } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { useFetchHabits } from "../../../hooks/habits";
import { useHabitLogsForAllHabits } from "../../../hooks/habitLogs";
import { format } from "date-fns";

// Enum for view modes
enum ViewMode {
  MONTH = "month",
  YEAR = "year",
}

// Define the Logging type to match the structure from the database
export type Logging = Record<string, Record<number, Record<string, Record<number, number>>>>;

// Helper function to transform habitLogsMap to the format expected by analytics components
const transformHabitLogsToAnalyticsFormat = (
  habits: Habit[],
  habitLogsMap: Record<number, Record<string, number>>
): Logging => {
  const result: Logging = {};
  
  habits.forEach(habit => {
    if (!habit.habitId) return;
    
    const habitId = habit.habitId;
    const habitName = habit.name;
    
    if (!result[habitName]) {
      result[habitName] = {};
    }
    
    // Get all logs for this habit
    const logs = habitLogsMap[habitId] || {};
    
    // Group logs by year and month
    Object.entries(logs).forEach(([dateStr, count]) => {
      try {
        const date = new Date(dateStr);
        const year = date.getFullYear();
        const month = format(date, 'MMMM').toLowerCase();
        const day = date.getDate();
        
        if (!result[habitName][year]) {
          result[habitName][year] = {};
        }
        
        if (!result[habitName][year][month]) {
          result[habitName][year][month] = {};
        }
        
        result[habitName][year][month][day] = count;
      } catch (error) {
        console.error(`Error processing date: ${dateStr}`, error);
      }
    });
  });
  
  return result;
};

const fadeUp = keyframes`
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
`;

// Styled component for the main container of the analytics page
const AnalyticsContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  width: calc(100% - 190px);
  height: calc(100vh - 56px);
  overflow-y: auto;
  position: absolute;
  top: 56px;
  left: 190px;
  padding: 20px;
  box-sizing: border-box;
  animation: ${fadeUp} 1s ease-out;

  @media (max-width: 800px) {
    width: calc(100% - 35px);
    left: 40px;
  }
`;

const NoHabitMessage = styled.div`
  margin-top: 20px;
  font-size: 18px;
  color: ${({ theme }) => theme.textGrey};
  text-align: center;
`;

// Helper function to create toggle options
const createToggleOption = (
  icon: IconDefinition,
  label: string,
  value: ViewMode
) => ({
  label: (
    <>
      <FontAwesomeIcon icon={icon} /> {label}
    </>
  ),
  value,
});

const toggleOptions = [
  createToggleOption(faCalendarAlt, "Monthly Overview", ViewMode.MONTH),
  createToggleOption(faCalendar, "Yearly Overview", ViewMode.YEAR),
];

// The main functional component for the Analytics page of the habit tracker
export function Analytics() {
  const [view, setView] = useState<ViewMode>(ViewMode.MONTH);
  const [selectedHabit, setSelectedHabit] = useState<string>("");
  
  // Get the current date for fetching logs
  const currentDate = new Date();
  const currentMonth = format(currentDate, "MMMM");
  const currentYear = currentDate.getFullYear();
  
  // Fetch habits using TanStack Query
  const {
    data: habits = [],
    isLoading: isLoadingHabits,
    error: habitsError,
  } = useFetchHabits();
  
  // Get a list of habit IDs
  const habitIds = useMemo(
    () => habits.map((h) => h.habitId).filter(Boolean) as number[],
    [habits]
  );
  
  // Fetch logs for all habits
  const {
    habitLogsMap,
    isLoading: isLoadingLogs,
    isError: isLogsError,
  } = useHabitLogsForAllHabits(habitIds, currentYear, currentMonth);
  
  // Transform habitLogsMap to the format expected by analytics components
  const habitsLog = useMemo(
    () => transformHabitLogsToAnalyticsFormat(habits, habitLogsMap),
    [habits, habitLogsMap]
  );

  useEffect(() => {
    // Get the selected habit from localStorage
    const storedSelectedHabit = localStorage.getItem(LocalStorage.SELECTED_HABIT);

    if (storedSelectedHabit && habits.some((habit) => habit.name === storedSelectedHabit)) {
      setSelectedHabit(storedSelectedHabit);
    } else if (habits.length > 0) {
      // If no habit is selected or the selected habit doesn't exist, select the first one
      setSelectedHabit(habits[0].name);
      localStorage.setItem(LocalStorage.SELECTED_HABIT, habits[0].name);
    }
  }, [habits]);

  const handleSelectHabit = (habitName: string) => {
    setSelectedHabit(habitName);
    localStorage.setItem(LocalStorage.SELECTED_HABIT, habitName);
  };
  
  // Show loading state
  if (isLoadingHabits || isLoadingLogs) {
    return (
      <PageBackground>
        <AnalyticsContainer>
          <div>Loading analytics data...</div>
        </AnalyticsContainer>
      </PageBackground>
    );
  }
  
  // Show error state
  if (habitsError || isLogsError) {
    return (
      <PageBackground>
        <AnalyticsContainer>
          <div>Error loading analytics data. Please try again later.</div>
        </AnalyticsContainer>
      </PageBackground>
    );
  }

  return (
    <PageBackground>
      <AnalyticsContainer>
        <ToggleButton
          options={toggleOptions}
          activeValue={view}
          onChange={(newView) => setView(newView as ViewMode)}
        />
        {view === ViewMode.MONTH ? (
          <MonthView
            habits={habits}
            onSelectHabit={handleSelectHabit}
            habitsLog={habitsLog}
            selectedHabit={selectedHabit}
            hideAnalytics={!selectedHabit}
          />
        ) : (
          <YearView
            habits={habits}
            onSelectHabit={handleSelectHabit}
            habitsLog={habitsLog}
            selectedHabit={selectedHabit}
            hideAnalytics={!selectedHabit}
          />
        )}
        {!selectedHabit && (
          <NoHabitMessage>
            Please select a habit to display analytics.
          </NoHabitMessage>
        )}
      </AnalyticsContainer>
    </PageBackground>
  );
} 